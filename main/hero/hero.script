local gravity = -20 --gravitacija
local jump_takeoff_speed = 900 -- brzina pri skokanje
local platform_speed = 2 -- brzina na dvizenje na platforma
local h_zabrzuvanje = 250 -- brzina na heroj

function init(self)
    -- enginot da se fokusira na komandite od ovaa skripta
	msg.post(".", "acquire_input_focus")

    -- zacuvaj ja pocetnata pozicija
    self.position = go.get_position()
    msg.post("platformi/platform_build#platform_build", "reset")
    
    self.desno = true
end

function final(self)
    -- vrati go fokusot
    msg.post(".", "release_input_focus")
end

function update(self, dt)

    local gravity = vmath.vector3(0, gravity, 0)
	
	if self.move_left then
		self.velocity.x = -h_zabrzuvanje
	elseif self.move_right then
		self.velocity.x = h_zabrzuvanje
	else
		self.velocity.x = 0
	end
	

	if not self.ground_contact then
		-- ako ne e na zemja, vazi gravitacija
		self.velocity = self.velocity + gravity
	else
		local pos = go.get_position()
		pos.x = pos.x - platform_speed
	    go.set_position(pos)
	end

	-- zabrzuvanje
	go.set_position(go.get_position() + self.velocity * dt)

	-- resetiraj
	self.correction = vmath.vector3()
	self.ground_contact = false
end

--custom fcija od net
local function handle_geometry_contact(self, normal, distance) 
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	-- project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
	end
end

function on_message(self, message_id, message, sender)
    if message_id == hash("reset") then
    -- vodi smetka za dvizenje i dali ima kontakt so zemjata
        self.velocity = vmath.vector3(0, 0, 0)
        self.correction = vmath.vector3()
        self.ground_contact = false
        self.anim = nil
       -- go.set(".", "euler.z", 0)
        go.set_position(self.position)
        msg.post("#collisionobject", "enable")
        elevo = false
        edesno = false

    elseif message_id == hash("contact_point_response") then
        -- spravi se so kontakt so zemja
        if message.group == hash("danger") then
           -- ubij go karakterot i resetiraj
            msg.post("#collisionobject", "disable")
            msg.post("controller:/controller_object", "show_menu")
          	--msg.post("platformi/platform_build#platform_build", "reset")
        elseif message.group == hash("geometry") then
            handle_geometry_contact(self, message.normal, message.distance)
        end
    end
end

local function jump(self)
    -- dozvoli skok samo od zemja
    if self.ground_contact then
        -- postavi brzina
        self.velocity.y = jump_takeoff_speed
        msg.post("controller:/controller_object#jump_sound", "play_sound", {delay = 0, gain = 0.5})
    end
end

local function abort_jump(self)
    -- stopiraj go skokot
    if self.velocity.y > 0 then
        -- skaliraj ja brzinata
        self.velocity.y = self.velocity.y * 0.5
    end
end

function on_input(self, action_id, action)
    if action_id == hash("skokaj") or action_id == hash("touch") then
        if action.pressed then
            jump(self)
            msg.post("#hero_sprite", "play_animation", {id = hash("jump")})
        elseif action.released then
            abort_jump(self)
        end
    end
	if action_id == hash("levo") then
		if action.pressed or action.repeated then
			self.move_left = true
			msg.post("#hero_sprite", "play_animation", {id = hash("run")})
			
			if self.desno then
				local xscale = go.get("#hero_sprite", "scale.x")
				go.set("#hero_sprite", "scale.x", xscale * -1)
				self.desno = false
			end
			
		elseif action.released then
			self.move_left = false
			if not self.desno then
				msg.post("#hero_sprite", "play_animation", {id = hash("wait")})
			end
		end
	elseif action_id == hash("desno") then
		if action.pressed or action.repeated then
			self.move_right = true
				msg.post("#hero_sprite", "play_animation", {id = hash("run")})
				if not self.desno then
					local xscale = go.get("#hero_sprite", "scale.x")
					go.set("#hero_sprite", "scale.x", xscale * -1)
					self.desno = true
				end

		elseif action.released then
			self.move_right = false
			
				if self.desno then
					msg.post("#hero_sprite", "play_animation", {id = hash("wait")})
				end
		end
	end
end